# Generate regression output.
JEL1 <- paste(mapply(paste, "+ as.factor(", grep("^JEL1", names(article), value=TRUE), ") ", sep=""), collapse="")
JEL3 <- paste(mapply(paste, "+ as.factor(", grep("^JEL3", names(article_pp), value=TRUE), ") ", sep=""), collapse="")
clist <- list("as.factor(Editor) + as.factor(Journal)", "as.factor(Year)", "as.factor(Journal):as.factor(Year)", "as.factor(MaxInst)", "as.factor(MaxT) + CiteCount + as.factor(NativeEnglish)")
vlist <- c("Flesch_Kincaid", "Gunning_Fog_Index", "SMOG")
for (c in 1:length(clist)) {
for (v in 1:length(vlist)) {
reg_eq = paste(vlist[v], " ~ FemRatio | ", paste(clist[1:c], collapse=" + "), " | 0 | Editor")
assign(paste("fit.", vlist[v], ".", c, sep=""), felm(as.formula(reg_eq), data=article))
}
}
# Add JEL regressions
for (v in 1:length(vlist)) {
# JEL1 effects.
fe_list <- append(clist, JEL1)
reg_eq = paste(vlist[v], " ~ FemRatio | ", paste(fe_list, collapse=" + "), " | 0 | Editor")
assign(paste("fit.", vlist[v], ".", length(clist)+1, sep=""), felm(as.formula(reg_eq), data=article))
# JEL3 effects.
fe_list <- append(clist, JEL3)
reg_eq = paste(vlist[v], " ~ FemRatio | ", paste(fe_list, collapse=" + "), " | 0 | Editor")
assign(paste("fit.", vlist[v], ".", length(clist)+2, sep=""), felm(as.formula(reg_eq), data=article_pp))
}
# Write regression output to LaTeX.
fh <- file(paste(fpath, "/tex/generated/tableApp4.tex", sep=""), "w")
mnum = length(clist)+2 # Number of models.
tableHeader(fh=fh, title="Gender differences in readability, article-level analysis", label="table4", col1len="2.64cm", coln=mnum, float=TRUE)
vnames = c("Flesch-Kincaid", "Gunning Fog Index", "SMOG")
feffects = list()
i = 1
for (v in 1:length(vlist)) {
coeffs = paste("\\mrow{3cm}{", vnames[v], "}", sep="")
ses = ""
for (c in 1:mnum) {
reg = get(paste("fit.", vlist[v], ".", c, sep=""))
stars = symnum(reg$cpval, corr = FALSE, na = FALSE, cutpoints = c(0, 0.01, 0.05, 0.1, 1), symbols = c("***", "**", "*", " "))
coeffs = paste(coeffs, "&", round(reg$coefficients, digits=2), stars, sep="")
ses = paste(ses, "&", "(", round(reg$se, digits=2), ")", sep="")
# Get names of fixed effects
for (f in 1:length(names(reg$fe))) {
feffects[[i]] <- names(reg$fe)[f]
i = i + 1
}
}
coeffs = paste("\t\t\t", coeffs, "\\\\", sep="")
ses = paste("\t\t\t", ses, "\\\\", sep="")
write(c(coeffs, ses), file=fh, append=TRUE)
}
# Add checkmarks for fixed effects
fenames <- list("as.factor(Editor)", "as.factor(Journal)", "as.factor(Year)", "as.factor(Journal):as.factor(Year)", "as.factor(MaxInst)", "as.factor(MaxT)", "CiteCount", "as.factor(NativeEnglish)")
jel1_names <- grep("^JEL1", names(article), value=TRUE)
fenames <- append(fenames, mapply(paste, "as.factor(", jel1_names, ")", sep=""))
jel3_names <- grep("^JEL3", names(article_pp), value=TRUE)
fenames <- append(fenames, mapply(paste, "as.factor(", jel3_names, ")", sep=""))
name_list <- append(list("Editor effects", "Journal effects", "Year effects", "Year\\times\\)Journal effects", "Institution effects", "Quality controls", "Quality controls", "Native speaker"), rep("\\textit{JEL} (primary) effects", length(jel1_names)))
name_list <- append(name_list, rep("\\textit{JEL} (tertiary) effects", length(jel3_names)))
names(fenames) <- name_list
schecks <- list("Quality controls", 5, "\\(\\text{\\ding{51}}^1\\)")
names(schecks) <- list("label", "col", "check")
tableFixedEffects(fh=fh, ufes=unique(feffects), vname="Flesch_Kincaid", fenames=fenames, special_check=data.frame(schecks), mnum=mnum)
# Add table footer.
note = paste(format(fit.Flesch_Kincaid.1$N, big.mark=","), "articles in (1)--(5);", format(fit.Flesch_Kincaid.6$N, big.mark=","), "articles in (6);", format(fit.Flesch_Kincaid.7$N, big.mark=","), "articles---including", format(sum(with(article_pp, Journal=="P&P")), big.mark=","), "from \\textit{AER Papers \\& Proceedings} (see~\\autoref{footnote34})---in (7). Results are identical to those in~\\autoref{table4}, except readability scores were calculated using the R program \\texttt{readability}. Quality controls denoted by \\(\\text{\\ding{51}}^1\\) include citation count and \\(\\text{max. }T_j\\) fixed effects. Standard errors clustered on editor in parentheses.")
tableFooter(fh=fh, note=note)
close(fh)
# Export data for author-level analysis in Stata because I cannot get pgmm to work with more than the very basic control variables; as soon as I try to add factor variables, it says the system is 'exactly signular' and won't computer.
# I mean, I tried for three fucking days to get this thing to run, but I just couldn't do it. Anyway, there's definitately a way to do it---you'll have to invert the matirx manually, but I'm tried enough. xtabond2 handles it so I just exported it to there.
write.dta(readstat, paste(fpath, "/data/readstat.dta", sep=""))
# NBER analysis
nber <- read.dta(paste(fpath, "/nber.dta", sep=""))
nber <- merge(readstat, article, by="ArticleID")
fpath <- "~/Dropbox/Readability/draft"
source(paste(fpath, "/scode/R/latextable.R", sep=""))
Sys.getenv("HOME")
fpath <- paste(Sys.getenv("HOME"), "/Dropbox/Readability/draft", sep="")
source(paste(fpath, "/scode/R/latextable.R", sep=""))
con <- dbConnect(RSQLite::SQLite(), "~/Dropbox/Readability/dta/read.db")
con <- dbConnect(RSQLite::SQLite(), paste(fpath, "/dta/read.db", sep=""))
paste(fpath, "/dta/read.db", sep="")
source(paste(fpath, "/scode/R/latextable.R", sep=""))
fpath, "/scode/R/latextable.R", sep="")
fpath <- paste(Sys.getenv("HOME"), "/Dropbox/Readability/", sep="")
source(paste(fpath, "/draft/scode/R/latextable.R", sep=""))
con <- dbConnect(RSQLite::SQLite(), paste(fpath, "/dta/read.db", sep=""))
query <- dbSendQuery(con, "SELECT ArticleID, Abstract FROM Article;")
abstract = dbFetch(query)
(readstat <- with(abstract, readability(Abstract, ArticleID)))
readstat <- subset(readstat, select = c("ArticleID", "Flesch_Kincaid", "Gunning_Fog_Index", "SMOG"))
readstat$Flesch_Kincaid <- readstat$Flesch_Kincaid * (-1)
readstat$Gunning_Fog_Index <- readstat$Gunning_Fog_Index * (-1)
readstat$SMOG <- readstat$SMOG * (-1)
readstat <- subset(readstat, select = c("ArticleID", "Flesch_Kincaid", "Gunning_Fog_Index", "SMOG"))
(readstat <- with(abstract, readability(Abstract, ArticleID)))
abstract$Abstract <- iconv(abstract$Abstract, "ASCII", "UTF-8", sub="")
Encoding(abstract$Abstract) <- "UTF-8"
(readstat <- with(abstract, readability(Abstract, ArticleID)))
abstract$Abstract <- iconv(abstract$Abstract, "ASCII", "UTF-8", sub="byte")
Sys.getlocale
install.packages(readr)
install.packages("readr")
library(readr)
query <- dbSendQuery(con, "SELECT ArticleID, Abstract FROM Article;")
abstract = dbFetch(query)
guess_encoding(abstract$Abstract, n_max=1000)
Sys.setlocale("LC_MESSAGES", 'en_GB.UTF-8')
Sys.setlocale("LC_MESSAGES", 'en_GB.UTF-8')
Sys.setenv(LANG = "en_US.UTF-8")
abstract = dbFetch(query)
(readstat <- with(abstract, readability(Abstract, ArticleID)))
abstract$Abstract[1]
abstract$Abstract[2]
query <- dbSendQuery(con, "SELECT ArticleID, Abstract FROM Article;")
abstract = dbFetch(query)
View(abstract)
(readstat <- with(abstract, readability(Abstract, ArticleID)))
abstract$Abstract <- iconv(abstract$Abstract, from="ASCII", to="UTF-8", sub="byte")
guess_encoding(abstract$Abstract[1])
iconvlist()
abstract$Abstract <- iconv(abstract$Abstract, from="macintosh", to="UTF-8", sub="byte")
(readstat <- with(abstract, readability(Abstract, ArticleID)))
# Multiply by negative 1. (So that larger scores correspond to better written text.)
readstat$Flesch_Kincaid <- readstat$Flesch_Kincaid * (-1)
readstat$Gunning_Fog_Index <- readstat$Gunning_Fog_Index * (-1)
readstat$SMOG <- readstat$SMOG * (-1)
# Import Stata data (non P&P).
article <- read.dta(paste(fpath, "/article.dta", sep=""))
jel1 <- read.dta(paste(fpath, "/primary_jel.dta", sep=""))
article <- merge(x=jel1, y=article, by="ArticleID", all.y=TRUE)
article <- merge(readstat, article, by="ArticleID")
# Import Stata data (including P&P for tertiary JEL regressions).
article_pp <- read.dta(paste(fpath, "/article_pp.dta", sep=""))
jel3 <- read.dta(paste(fpath, "/tertiary_jel.dta", sep=""))
article_pp <- merge(x=jel3, y=article_pp, by="ArticleID", all.y=TRUE)
article_pp <- merge(readstat, article_pp, by="ArticleID")
# Generate regression output.
JEL1 <- paste(mapply(paste, "+ as.factor(", grep("^JEL1", names(article), value=TRUE), ") ", sep=""), collapse="")
JEL3 <- paste(mapply(paste, "+ as.factor(", grep("^JEL3", names(article_pp), value=TRUE), ") ", sep=""), collapse="")
clist <- list("as.factor(Editor) + as.factor(Journal)", "as.factor(Year)", "as.factor(Journal):as.factor(Year)", "as.factor(MaxInst)", "as.factor(MaxT) + CiteCount + as.factor(NativeEnglish)")
vlist <- c("Flesch_Kincaid", "Gunning_Fog_Index", "SMOG")
for (c in 1:length(clist)) {
for (v in 1:length(vlist)) {
reg_eq = paste(vlist[v], " ~ FemRatio | ", paste(clist[1:c], collapse=" + "), " | 0 | Editor")
assign(paste("fit.", vlist[v], ".", c, sep=""), felm(as.formula(reg_eq), data=article))
}
}
# Add JEL regressions
for (v in 1:length(vlist)) {
# JEL1 effects.
fe_list <- append(clist, JEL1)
reg_eq = paste(vlist[v], " ~ FemRatio | ", paste(fe_list, collapse=" + "), " | 0 | Editor")
assign(paste("fit.", vlist[v], ".", length(clist)+1, sep=""), felm(as.formula(reg_eq), data=article))
# JEL3 effects.
fe_list <- append(clist, JEL3)
reg_eq = paste(vlist[v], " ~ FemRatio | ", paste(fe_list, collapse=" + "), " | 0 | Editor")
assign(paste("fit.", vlist[v], ".", length(clist)+2, sep=""), felm(as.formula(reg_eq), data=article_pp))
}
article <- read.dta(paste(fpath, "/draft/data/article.dta", sep=""))
jel1 <- read.dta(paste(fpath, "/draft/data/primary_jel.dta", sep=""))
article <- merge(x=jel1, y=article, by="ArticleID", all.y=TRUE)
article <- merge(readstat, article, by="ArticleID")
article_pp <- read.dta(paste(fpath, "/draft/data/article_pp.dta", sep=""))
jel3 <- read.dta(paste(fpath, "/draft/data/tertiary_jel.dta", sep=""))
article_pp <- merge(x=jel3, y=article_pp, by="ArticleID", all.y=TRUE)
article_pp <- merge(readstat, article_pp, by="ArticleID")
JEL1 <- paste(mapply(paste, "+ as.factor(", grep("^JEL1", names(article), value=TRUE), ") ", sep=""), collapse="")
JEL3 <- paste(mapply(paste, "+ as.factor(", grep("^JEL3", names(article_pp), value=TRUE), ") ", sep=""), collapse="")
clist <- list("as.factor(Editor) + as.factor(Journal)", "as.factor(Year)", "as.factor(Journal):as.factor(Year)", "as.factor(MaxInst)", "as.factor(MaxT) + CiteCount + as.factor(NativeEnglish)")
vlist <- c("Flesch_Kincaid", "Gunning_Fog_Index", "SMOG")
for (c in 1:length(clist)) {
for (v in 1:length(vlist)) {
reg_eq = paste(vlist[v], " ~ FemRatio | ", paste(clist[1:c], collapse=" + "), " | 0 | Editor")
assign(paste("fit.", vlist[v], ".", c, sep=""), felm(as.formula(reg_eq), data=article))
}
}
View(readstat)
# Add JEL regressions
for (v in 1:length(vlist)) {
# JEL1 effects.
fe_list <- append(clist, JEL1)
reg_eq = paste(vlist[v], " ~ FemRatio | ", paste(fe_list, collapse=" + "), " | 0 | Editor")
assign(paste("fit.", vlist[v], ".", length(clist)+1, sep=""), felm(as.formula(reg_eq), data=article))
# JEL3 effects.
fe_list <- append(clist, JEL3)
reg_eq = paste(vlist[v], " ~ FemRatio | ", paste(fe_list, collapse=" + "), " | 0 | Editor")
assign(paste("fit.", vlist[v], ".", length(clist)+2, sep=""), felm(as.formula(reg_eq), data=article_pp))
}
# Write regression output to LaTeX.
fh <- file(paste(fpath, "/draft/tex/generated/tableApp4.tex", sep=""), "w")
mnum = length(clist)+2 # Number of models.
tableHeader(fh=fh, title="Gender differences in readability, article-level analysis", label="table4", col1len="2.64cm", coln=mnum, float=TRUE)
vnames = c("Flesch-Kincaid", "Gunning Fog Index", "SMOG")
feffects = list()
i = 1
for (v in 1:length(vlist)) {
coeffs = paste("\\mrow{3cm}{", vnames[v], "}", sep="")
ses = ""
for (c in 1:mnum) {
reg = get(paste("fit.", vlist[v], ".", c, sep=""))
stars = symnum(reg$cpval, corr = FALSE, na = FALSE, cutpoints = c(0, 0.01, 0.05, 0.1, 1), symbols = c("***", "**", "*", " "))
coeffs = paste(coeffs, "&", round(reg$coefficients, digits=2), stars, sep="")
ses = paste(ses, "&", "(", round(reg$se, digits=2), ")", sep="")
# Get names of fixed effects
for (f in 1:length(names(reg$fe))) {
feffects[[i]] <- names(reg$fe)[f]
i = i + 1
}
}
coeffs = paste("\t\t\t", coeffs, "\\\\", sep="")
ses = paste("\t\t\t", ses, "\\\\", sep="")
write(c(coeffs, ses), file=fh, append=TRUE)
}
# Add checkmarks for fixed effects
fenames <- list("as.factor(Editor)", "as.factor(Journal)", "as.factor(Year)", "as.factor(Journal):as.factor(Year)", "as.factor(MaxInst)", "as.factor(MaxT)", "CiteCount", "as.factor(NativeEnglish)")
jel1_names <- grep("^JEL1", names(article), value=TRUE)
fenames <- append(fenames, mapply(paste, "as.factor(", jel1_names, ")", sep=""))
jel3_names <- grep("^JEL3", names(article_pp), value=TRUE)
fenames <- append(fenames, mapply(paste, "as.factor(", jel3_names, ")", sep=""))
name_list <- append(list("Editor effects", "Journal effects", "Year effects", "Year\\times\\)Journal effects", "Institution effects", "Quality controls", "Quality controls", "Native speaker"), rep("\\textit{JEL} (primary) effects", length(jel1_names)))
name_list <- append(name_list, rep("\\textit{JEL} (tertiary) effects", length(jel3_names)))
names(fenames) <- name_list
schecks <- list("Quality controls", 5, "\\(\\text{\\ding{51}}^1\\)")
names(schecks) <- list("label", "col", "check")
tableFixedEffects(fh=fh, ufes=unique(feffects), vname="Flesch_Kincaid", fenames=fenames, special_check=data.frame(schecks), mnum=mnum)
# Add table footer.
note = paste(format(fit.Flesch_Kincaid.1$N, big.mark=","), "articles in (1)--(5);", format(fit.Flesch_Kincaid.6$N, big.mark=","), "articles in (6);", format(fit.Flesch_Kincaid.7$N, big.mark=","), "articles---including", format(sum(with(article_pp, Journal=="P&P")), big.mark=","), "from \\textit{AER Papers \\& Proceedings} (see~\\autoref{footnote34})---in (7). Results are identical to those in~\\autoref{table4}, except readability scores were calculated using the R program \\texttt{readability}. Quality controls denoted by \\(\\text{\\ding{51}}^1\\) include citation count and \\(\\text{max. }T_j\\) fixed effects. Standard errors clustered on editor in parentheses.")
tableFooter(fh=fh, note=note)
close(fh)
# Export data for author-level analysis in Stata because I cannot get pgmm to work with more than the very basic control variables; as soon as I try to add factor variables, it says the system is 'exactly signular' and won't computer.
# I mean, I tried for three fucking days to get this thing to run, but I just couldn't do it. Anyway, there's definitately a way to do it---you'll have to invert the matirx manually, but I'm tried enough. xtabond2 handles it so I just exported it to there.
write.dta(readstat, paste(fpath, "/draft/data/readstat.dta", sep=""))
# NBER analysis
nber <- read.dta(paste(fpath, "/draft/nber.dta", sep=""))
nber <- merge(readstat, article, by="ArticleID")
query <- dbSendQuery(con, "SELECT ArticleID, NberID, WPDate, StatName FROM NBER NATURAL JOIN NBERCorr NATURAL JOIN NBERStat;")
nber = dbFetch(query)
nber <- merge(readstat, nber, by="ArticleID")
View(nber)
query <- dbSendQuery(con, "SELECT ArticleID, NberID, Abstract FROM NBER NATURAL JOIN NBERCorr;")
nber = dbFetch(query)
(nberstat <- with(nber, readability(Abstract, NberID)))
query <- dbSendQuery(con, "SELECT ArticleID, NberID, Abstract FROM NBER NATURAL JOIN NBERCorr;")
nber = dbFetch(query)
(nberstat <- with(nber, readability(Abstract, NberID)))
nberstat <- subset(nberstat, select = c("ArticleID", "Flesch_Kincaid", "Gunning_Fog_Index", "SMOG"))
names(nberstat) <- c("NberID", "NBER_Flesch_Kincaid", "NBER_Gunning_Fog_Index", "NBER_SMOG")
names(nberstat)
nberstat <- subset(nberstat, select = c("ArticleID", "Flesch_Kincaid", "Gunning_Fog_Index", "SMOG"))
nberstat <- subset(nberstat, select = c("NberID", "Flesch_Kincaid", "Gunning_Fog_Index", "SMOG"))
names(nberstat) <- c("NberID", "NBER_Flesch_Kincaid", "NBER_Gunning_Fog_Index", "NBER_SMOG")
names(nberstat)
nber <- merge(nber, nberstat, by="ArticleID")
nber <- merge(nber, nberstat, by="NberID")
nber <- merge(article, nberstat, by="ArticleID")
NBER
nber
View(nber)
query <- dbSendQuery(con, "SELECT ArticleID, NberID, Abstract FROM NBER NATURAL JOIN NBERCorr;")
nber = dbFetch(query)
(nberstat <- with(nber, readability(Abstract, NberID)))
nber <- merge(nber, nberstat, by="NberID")
names(nber) <- c("NberID", "ArticleID", "NBER_Flesch_Kincaid", "NBER_Gunning_Fog_Index", "NBER_SMOG")
nber <- merge(article, nberstat, by="ArticleID")
query <- dbSendQuery(con, "SELECT ArticleID, NberID, Abstract FROM NBER NATURAL JOIN NBERCorr;")
nber = dbFetch(query)
(nberstat <- with(nber, readability(Abstract, NberID)))
nber <- merge(nber, nberstat, by="NberID")
nber <- subset(nber, select = c("NberID", "ArticleID", "Flesch_Kincaid", "Gunning_Fog_Index", "SMOG"))
names(nber) <- c("NberID", "ArticleID", "NBER_Flesch_Kincaid", "NBER_Gunning_Fog_Index", "NBER_SMOG")
nber$NBER_Flesch_Kincaid <- nber$NBER_Flesch_Kincaid * (-1)
nber$NBER_Gunning_Fog_Index <- nber$NBER_Gunning_Fog_Index * (-1)
nber$NBER_SMOG <- nber$NBER_SMOG * (-1)
nber <- merge(article, nber, by="ArticleID")
nber$Blind <- Year<=1997 & (Journal=="QJE"|(Year>=1992&Journal=="AER"))
nber$Blind <- nber$Year<=1997 & (nber$Journal=="QJE"|(nber$Year>=1992&nber$Journal=="AER"))
clist <- list("as.factor(Editor) + as.factor(Journal)", "as.factor(Year)", "as.factor(Journal):as.factor(Year)", "as.factor(MaxInst)", "as.factor(MaxT) + CiteCount + as.factor(NativeEnglish)")
vlist <- c("NBER_Flesch_Kincaid", "NBER_Gunning_Fog_Index", "NBER_SMOG")
for (v in 1:length(vlist)) {
reg_eq = paste(vlist[v], " ~ FemRatio | ", paste(clist, collapse=" + "), " | 0 | Editor")
assign(paste("NBER_fit.", vlist[v], ".", c, sep=""), felm(as.formula(reg_eq), data=nber))
}
summary NBER_fit.NBER_Flesch_Kincaid.7
summary(NBER_fit.NBER_Flesch_Kincaid.7)
assign(paste("NBER_fit.", vlist[v], ".1", sep=""), felm(as.formula(reg_eq), data=nber))
vlist <- c("NBER_Flesch_Kincaid", "NBER_Gunning_Fog_Index", "NBER_SMOG", "Flesch_Kincaid", "Gunning_Fog_Index", "SMOG")
for (v in 1:length(vlist)) {
reg_eq = paste(vlist[v], " ~ FemRatio | ", paste(clist, collapse=" + "), " | 0 | Editor")
assign(paste("NBER_fit.", vlist[v], ".1", sep=""), felm(as.formula(reg_eq), data=nber))
}
summary(NBER_fit.NBER_Flesch_Kincaid.1)
summary(NBER_fit.Flesch_Kincaid.1)
summary(NBER_fit.NBER_Gunning_Fog_Index.1)
summary(NBER_fit.Gunning_Fog_Index.1)
library(systemfit)
install.packages("systemfit")
clist <- "as.factor(Editor) + as.factor(Year)*as.factor(Journal) + Maxt + MaxT + CiteCount + as.factor(NativeEnglish)"
clist <- "as.factor(Editor) + as.factor(Year)*as.factor(Journal) + Maxt + MaxT + CiteCount + as.factor(NativeEnglish)"
vlist <- c("NBER_Flesch_Kincaid", "NBER_Gunning_Fog_Index", "NBER_SMOG", "Flesch_Kincaid", "Gunning_Fog_Index", "SMOG")
for (v in 1:length(vlist)) {
reg_eq = paste(vlist[v], " ~ FemRatio | ", clist, " | 0 | Editor")
assign(paste("NBER_fit.", vlist[v], sep=""), felm(as.formula(reg_eq), data=nber))
}
summary(NBER_fit.Gunning_Fog_Index)
summary(NBER_fit.NBER_Gunning_Fog_Index)
summary(NBER_fit.Gunning_Fog_Index)
summary(NBER_fit.NBER_Gunning_Fog_Index)
for (v in 1:length(vlist)) {
reg_eq = paste(vlist[v], " ~ FemRatio | ", clist, " | 0 | Editor")
assign(paste("NBER_fit.", vlist[v], sep=""), felm(as.formula(reg_eq), data=subset(nber, Blind==0)))
}
summary(NBER_fit.NBER_Gunning_Fog_Index)
summary(NBER_fit.Gunning_Fog_Index)
summary(NBER_fit.NBER_Gunning_Fog_Index)$coefficients
summary(NBER_fit.Gunning_Fog_Index)$coefficients
fitsur <- systemfit(list(NBER_Gunning_Fog_Index = clist, Gunning_Fog_Index = clist), data=subset(nber, Blind==FALSE))
for (v in 1:length(vlist)) {
reg_eq = paste(vlist[v], " ~ FemRatio | ", clist, " | 0 | Editor")
assign(paste("NBER_fit.", vlist[v], sep=""), felm(as.formula(reg_eq), data=subset(nber, Blind==FALSE)))
}
summary(NBER_fit.NBER_Gunning_Fog_Index)$coefficients
summary(NBER_fit.Gunning_Fog_Index)$coefficients
library(systemfit)
fitsur <- systemfit(list(NBER_Gunning_Fog_Index = clist, Gunning_Fog_Index = clist), data=subset(nber, Blind==FALSE))
fitsur <- systemfit(list(NBER_Gunning_Fog_Index = as.formula(clist), Gunning_Fog_Index = as.formula(clist)), data=subset(nber, Blind==FALSE))
View(article)
# file path
fpath <- paste(Sys.getenv("HOME"), "/Dropbox/Readability/", sep="")
# Import LaTeX table generation functions.
source(paste(fpath, "/draft/scode/R/latextable.R", sep=""))
# Create database connection.
con <- dbConnect(RSQLite::SQLite(), paste(fpath, "/dta/read.db", sep=""))
# Fetch article-level data.
query <- dbSendQuery(con, "SELECT ArticleID, Abstract FROM Article;")
abstract = dbFetch(query)
abstract$Abstract <- iconv(abstract$Abstract, from="macintosh", to="UTF-8", sub="byte")
(readstat <- with(abstract, readability(Abstract, ArticleID)))
readstat <- subset(readstat, select = c("ArticleID", "Flesch_Kincaid", "Gunning_Fog_Index", "SMOG"))
# Multiply by negative 1. (So that larger scores correspond to better written text.)
readstat$Flesch_Kincaid <- readstat$Flesch_Kincaid * (-1)
readstat$Gunning_Fog_Index <- readstat$Gunning_Fog_Index * (-1)
readstat$SMOG <- readstat$SMOG * (-1)
# Import Stata data (non P&P).
article <- read.dta(paste(fpath, "/draft/data/article.dta", sep=""))
jel1 <- read.dta(paste(fpath, "/draft/data/primary_jel.dta", sep=""))
article <- merge(x=jel1, y=article, by="ArticleID", all.y=TRUE)
article <- merge(readstat, article, by="ArticleID")
# Import Stata data (including P&P for tertiary JEL regressions).
article_pp <- read.dta(paste(fpath, "/draft/data/article_pp.dta", sep=""))
jel3 <- read.dta(paste(fpath, "/draft/data/tertiary_jel.dta", sep=""))
article_pp <- merge(x=jel3, y=article_pp, by="ArticleID", all.y=TRUE)
article_pp <- merge(readstat, article_pp, by="ArticleID")
# Generate regression output.
JEL1 <- paste(mapply(paste, "+ as.factor(", grep("^JEL1", names(article), value=TRUE), ") ", sep=""), collapse="")
JEL3 <- paste(mapply(paste, "+ as.factor(", grep("^JEL3", names(article_pp), value=TRUE), ") ", sep=""), collapse="")
clist <- list("as.factor(Editor) + as.factor(Journal)", "as.factor(Year)", "as.factor(Journal):as.factor(Year)", "as.factor(MaxInst)", "as.factor(MaxT) + CiteCount + as.factor(NativeEnglish)")
vlist <- c("Flesch_Kincaid", "Gunning_Fog_Index", "SMOG")
for (c in 1:length(clist)) {
for (v in 1:length(vlist)) {
reg_eq = paste(vlist[v], " ~ FemRatio | ", paste(clist[1:c], collapse=" + "), " | 0 | Editor")
assign(paste("fit.", vlist[v], ".", c, sep=""), felm(as.formula(reg_eq), data=article))
}
}
# Add JEL regressions
for (v in 1:length(vlist)) {
# JEL1 effects.
fe_list <- append(clist, JEL1)
reg_eq = paste(vlist[v], " ~ FemRatio | ", paste(fe_list, collapse=" + "), " | 0 | Editor")
assign(paste("fit.", vlist[v], ".", length(clist)+1, sep=""), felm(as.formula(reg_eq), data=article))
# JEL3 effects.
fe_list <- append(clist, JEL3)
reg_eq = paste(vlist[v], " ~ FemRatio | ", paste(fe_list, collapse=" + "), " | 0 | Editor")
assign(paste("fit.", vlist[v], ".", length(clist)+2, sep=""), felm(as.formula(reg_eq), data=article_pp))
}
# Write regression output to LaTeX.
fh <- file(paste(fpath, "/draft/tex/generated/tableApp4.tex", sep=""), "w")
mnum = length(clist)+2 # Number of models.
tableHeader(fh=fh, title="Gender differences in readability, article-level analysis", label="table4", col1len="2.64cm", coln=mnum, float=TRUE)
vnames = c("Flesch-Kincaid", "Gunning Fog Index", "SMOG")
feffects = list()
i = 1
for (v in 1:length(vlist)) {
coeffs = paste("\\mrow{3cm}{", vnames[v], "}", sep="")
ses = ""
for (c in 1:mnum) {
reg = get(paste("fit.", vlist[v], ".", c, sep=""))
stars = symnum(reg$cpval, corr = FALSE, na = FALSE, cutpoints = c(0, 0.01, 0.05, 0.1, 1), symbols = c("***", "**", "*", " "))
coeffs = paste(coeffs, "&", round(reg$coefficients, digits=2), stars, sep="")
ses = paste(ses, "&", "(", round(reg$se, digits=2), ")", sep="")
# Get names of fixed effects
for (f in 1:length(names(reg$fe))) {
feffects[[i]] <- names(reg$fe)[f]
i = i + 1
}
}
coeffs = paste("\t\t\t", coeffs, "\\\\", sep="")
ses = paste("\t\t\t", ses, "\\\\", sep="")
write(c(coeffs, ses), file=fh, append=TRUE)
}
# Add checkmarks for fixed effects
fenames <- list("as.factor(Editor)", "as.factor(Journal)", "as.factor(Year)", "as.factor(Journal):as.factor(Year)", "as.factor(MaxInst)", "as.factor(MaxT)", "CiteCount", "as.factor(NativeEnglish)")
jel1_names <- grep("^JEL1", names(article), value=TRUE)
fenames <- append(fenames, mapply(paste, "as.factor(", jel1_names, ")", sep=""))
jel3_names <- grep("^JEL3", names(article_pp), value=TRUE)
fenames <- append(fenames, mapply(paste, "as.factor(", jel3_names, ")", sep=""))
name_list <- append(list("Editor effects", "Journal effects", "Year effects", "Year\\times\\)Journal effects", "Institution effects", "Quality controls", "Quality controls", "Native speaker"), rep("\\textit{JEL} (primary) effects", length(jel1_names)))
name_list <- append(name_list, rep("\\textit{JEL} (tertiary) effects", length(jel3_names)))
names(fenames) <- name_list
schecks <- list("Quality controls", 5, "\\(\\text{\\ding{51}}^1\\)")
names(schecks) <- list("label", "col", "check")
tableFixedEffects(fh=fh, ufes=unique(feffects), vname="Flesch_Kincaid", fenames=fenames, special_check=data.frame(schecks), mnum=mnum)
# Add table footer.
note = paste(format(fit.Flesch_Kincaid.1$N, big.mark=","), "articles in (1)--(5);", format(fit.Flesch_Kincaid.6$N, big.mark=","), "articles in (6);", format(fit.Flesch_Kincaid.7$N, big.mark=","), "articles---including", format(sum(with(article_pp, Journal=="P&P")), big.mark=","), "from \\textit{AER Papers \\& Proceedings} (see~\\autoref{footnote34})---in (7). Results are identical to those in~\\autoref{table4}, except readability scores were calculated using the R program \\texttt{readability}. Quality controls denoted by \\(\\text{\\ding{51}}^1\\) include citation count and \\(\\text{max. }T_j\\) fixed effects. Standard errors clustered on editor in parentheses.")
tableFooter(fh=fh, note=note)
close(fh)
# Export data for author-level analysis in Stata because I cannot get pgmm to work with more than the very basic control variables; as soon as I try to add factor variables, it says the system is 'exactly signular' and won't computer.
# I mean, I tried for three fucking days to get this thing to run, but I just couldn't do it. Anyway, there's definitately a way to do it---you'll have to invert the matirx manually, but I'm tried enough. xtabond2 handles it so I just exported it to there.
write.dta(readstat, paste(fpath, "/draft/data/readstat.dta", sep=""))
View(article)
fitsur <- systemfit(list(NBER_Gunning_Fog_Index = as.formula(clist), Gunning_Fog_Index = as.formula(clist)), data=subset(nber, Blind==FALSE))
# Fetch and generate NBER readability statistics.
query <- dbSendQuery(con, "SELECT ArticleID, NberID, Abstract FROM NBER NATURAL JOIN NBERCorr;")
nber = dbFetch(query)
(nberstat <- with(nber, readability(Abstract, NberID)))
nber <- merge(nber, nberstat, by="NberID")
nber <- subset(nber, select = c("NberID", "ArticleID", "Flesch_Kincaid", "Gunning_Fog_Index", "SMOG"))
names(nber) <- c("NberID", "ArticleID", "NBER_Flesch_Kincaid", "NBER_Gunning_Fog_Index", "NBER_SMOG")
nber <- merge(article, nber, by="ArticleID")
# Multiply by negative 1. (So that larger scores correspond to better written text.)
nber$NBER_Flesch_Kincaid <- nber$NBER_Flesch_Kincaid * (-1)
nber$NBER_Gunning_Fog_Index <- nber$NBER_Gunning_Fog_Index * (-1)
nber$NBER_SMOG <- nber$NBER_SMOG * (-1)
# Define observations subject to double-blind review before the internet.
nber$Blind <- nber$Year<=1997 & (nber$Journal=="QJE"|(nber$Year>=1992&nber$Journal=="AER"))
nber$Editor
fitsur <- systemfit(list(NBER_Gunning_Fog_Index = as.formula(clist), Gunning_Fog_Index = as.formula(clist)), data=subset(nber, Blind==FALSE))
as.formula(clist)
clist
clist <- "as.factor(Editor) + as.factor(Year)*as.factor(Journal) + Maxt + MaxT + CiteCount + as.factor(NativeEnglish)"
fitsur <- systemfit(list(NBER_Gunning_Fog_Index = as.formula(clist), Gunning_Fog_Index = as.formula(clist)), data=subset(nber, Blind==FALSE))
nber$Editor
fitsur <- systemfit(list(NBER_Gunning_Fog_Index = as.factor(Editor) + as.factor(Year)*as.factor(Journal) + Maxt + MaxT + CiteCount + as.factor(NativeEnglish), Gunning_Fog_Index = as.factor(Editor) + as.factor(Year)*as.factor(Journal) + Maxt + MaxT + CiteCount + as.factor(NativeEnglish)), data=subset(nber, Blind==FALSE))
nber_noblind <- subset(nber, Blind==FALSE)
View(nber_noblind)
nber_noblind$Editor
fitsur <- systemfit(list(NBER_Gunning_Fog_Index = as.factor(Editor) + as.factor(Year)*as.factor(Journal) + Maxt + MaxT + CiteCount + as.factor(NativeEnglish), Gunning_Fog_Index = as.factor(Editor) + as.factor(Year)*as.factor(Journal) + Maxt + MaxT + CiteCount + as.factor(NativeEnglish)), data=nber_noblind)
fitsur <- systemfit(list(NBER_Gunning_Fog_Index = FemRatio + as.factor(Editor) + as.factor(Year)*as.factor(Journal) + Maxt + MaxT + CiteCount + as.factor(NativeEnglish), Gunning_Fog_Index = FemRatio + as.factor(Editor) + as.factor(Year)*as.factor(Journal) + Maxt + MaxT + CiteCount + as.factor(NativeEnglish)), data=nber_noblind)
fitsur <- systemfit(list(nber = NBER_Gunning_Fog_Index ~ FemRatio + as.factor(Editor) + as.factor(Year)*as.factor(Journal) + Maxt + MaxT + CiteCount + as.factor(NativeEnglish), pub = Gunning_Fog_Index ~ FemRatio + as.factor(Editor) + as.factor(Year)*as.factor(Journal) + Maxt + MaxT + CiteCount + as.factor(NativeEnglish)), data=nber_noblind)
fitsur <- systemfit(list(nber = NBER_Gunning_Fog_Index ~ FemRatio, pub = Gunning_Fog_Index ~ FemRatio, data=nber_noblind)
)
fitsur <- systemfit(list(nber = NBER_Gunning_Fog_Index ~ FemRatio, pub = Gunning_Fog_Index ~ FemRatio), data=nber_noblind)
summary(fitsur)
library(car)
restriction <- "pub_FemRatio - nber_FemRatio"
linearHypothesis(fitsur, restriction, test = "Chisq")
fitsur <- systemfit(list(nber = NBER_Gunning_Fog_Index ~ FemRatio + as.factor(Journal), pub = Gunning_Fog_Index ~ FemRatio) + as.factor(Journal), data=nber_noblind)
fitsur <- systemfit(list(nber = NBER_Gunning_Fog_Index ~ FemRatio + as.factor(Journal), pub = Gunning_Fog_Index ~ FemRatio + as.factor(Journal)), data=nber_noblind)
query <- dbSendQuery(con, "SELECT ArticleID, NberID, Abstract FROM NBER NATURAL JOIN NBERCorr;")
nber = dbFetch(query)
(nberstat <- with(nber, readability(Abstract, NberID)))
nber <- merge(nber, nberstat, by="NberID")
nber <- subset(nber, select = c("NberID", "ArticleID", "Flesch_Kincaid", "Gunning_Fog_Index", "SMOG"))
names(nber) <- c("NberID", "ArticleID", "NBER_Flesch_Kincaid", "NBER_Gunning_Fog_Index", "NBER_SMOG")
write.dta(readstat, paste(fpath, "/draft/data/nberstat.dta", sep=""))
fitsur <- systemfit(list(nber = NBER_Gunning_Fog_Index ~ FemRatio + as.factor(Journal), pub = Gunning_Fog_Index ~ FemRatio + as.factor(Journal)), data=nber_noblind)
write.dta(nberstat, paste(fpath, "/draft/data/nberstat.dta", sep=""))
memory.limit()
memory.limit(size=50000)
fitsur <- systemfit(list(nber = NBER_Gunning_Fog_Index ~ FemRatio + as.factor(Journal), pub = Gunning_Fog_Index ~ FemRatio + as.factor(Journal)), data=nber_noblind)
fitsur <- systemfit(list(nber = NBER_Gunning_Fog_Index ~ FemRatio + as.factor(Journal), pub = Gunning_Fog_Index ~ FemRatio), data=nber_noblind)
fitsur <- systemfit(list(nber = NBER_Gunning_Fog_Index ~ FemRatio, pub = Gunning_Fog_Index ~ FemRatio + as.factor(Journal)), data=nber_noblind)
fitsur <- systemfit(list(nber = NBER_Gunning_Fog_Index ~ FemRatio, pub = Gunning_Fog_Index ~ FemRatio), data=nber_noblind)
summary(fitsur)
write.dta(subset(nber, select=("ArticleID", "NberID", "NBER_Flesch_Kincaid", "Flesch_Kincaid", "NBER_Gunning_Fog_Index", "Gunning_Fog_Index", "NBER_SMOG", "SMOG"), paste(fpath, "/draft/data/nberstat.dta", sep=""))
# Define observations subject to double-blind review before the internet.
nber$Blind <- nber$Year<=1997 & (nber$Journal=="QJE"|(nber$Year>=1992&nber$Journal=="AER"))
# Run regressions.
clist <- "as.factor(Editor) + as.factor(Year)*as.factor(Journal) + Maxt + MaxT + CiteCount + as.factor(NativeEnglish)"
vlist <- c("NBER_Flesch_Kincaid", "NBER_Gunning_Fog_Index", "NBER_SMOG", "Flesch_Kincaid", "Gunning_Fog_Index", "SMOG")
for (v in 1:length(vlist)) {
reg_eq = paste(vlist[v], " ~ FemRatio | ", clist, " | 0 | Editor")
assign(paste("NBER_fit.", vlist[v], sep=""), felm(as.formula(reg_eq), data=subset(nber, Blind==FALSE)))
}
write.dta(subset(nber, select=("ArticleID", "NberID", "NBER_Flesch_Kincaid", "Flesch_Kincaid", "NBER_Gunning_Fog_Index", "Gunning_Fog_Index", "NBER_SMOG", "SMOG")), paste(fpath, "/draft/data/nberstat.dta", sep=""))
write.dta(subset(nber, select=("ArticleID", "NberID", "NBER_Flesch_Kincaid", "Flesch_Kincaid", "NBER_Gunning_Fog_Index", "Gunning_Fog_Index", "NBER_SMOG", "SMOG")), paste(fpath, "/draft/data/nberstat.dta", sep=""))
exp_data <- subset(nber, select=("ArticleID", "NberID", "NBER_Flesch_Kincaid", "Flesch_Kincaid", "NBER_Gunning_Fog_Index", "Gunning_Fog_Index", "NBER_SMOG", "SMOG"))
exp_data <- subset(nber, select=("ArticleID", "NberID"))
nber <- merge(article, nber, by="ArticleID")
exp_data <- subset(nber, select=("ArticleID", "NberID"))
query <- dbSendQuery(con, "SELECT ArticleID, NberID, Abstract FROM NBER NATURAL JOIN NBERCorr;")
nber = dbFetch(query)
(nberstat <- with(nber, readability(Abstract, NberID)))
nber <- merge(nber, nberstat, by="NberID")
nber <- subset(nber, select=("NberID", "ArticleID", "Flesch_Kincaid", "Gunning_Fog_Index", "SMOG"))
nber <- subset(nber, select=c("NberID", "ArticleID", "Flesch_Kincaid", "Gunning_Fog_Index", "SMOG"))
names(nber) <- c("NberID", "ArticleID", "NBER_Flesch_Kincaid", "NBER_Gunning_Fog_Index", "NBER_SMOG")
nber <- merge(article, nber, by="ArticleID")
nber$NBER_Flesch_Kincaid <- nber$NBER_Flesch_Kincaid * (-1)
nber$NBER_Gunning_Fog_Index <- nber$NBER_Gunning_Fog_Index * (-1)
nber$NBER_SMOG <- nber$NBER_SMOG * (-1)
exp_data <- subset(nber, select=("ArticleID", "NberID"))
exp_data <- subset(nber, select=c("ArticleID", "NberID", "NBER_Flesch_Kincaid", "Flesch_Kincaid", "NBER_Gunning_Fog_Index", "Gunning_Fog_Index", "NBER_SMOG", "SMOG"))
write.dta(, paste(fpath, "/draft/data/nberstat.dta", sep=""))
write.dta(exp_data, paste(fpath, "/draft/data/nberstat.dta", sep=""))
# Fetch and generate NBER readability statistics.
query <- dbSendQuery(con, "SELECT ArticleID, NberID, Abstract FROM NBER NATURAL JOIN NBERCorr;")
nber = dbFetch(query)
(nberstat <- with(nber, readability(Abstract, NberID)))
nber <- merge(nber, nberstat, by="NberID")
nber <- subset(nber, select=c("NberID", "ArticleID", "Flesch_Kincaid", "Gunning_Fog_Index", "SMOG"))
names(nber) <- c("NberID", "ArticleID", "NBER_Flesch_Kincaid", "NBER_Gunning_Fog_Index", "NBER_SMOG")
nber <- merge(readstat, nber, by="ArticleID")
# Multiply by negative 1. (So that larger scores correspond to better written text.)
nber$NBER_Flesch_Kincaid <- nber$NBER_Flesch_Kincaid * (-1)
nber$NBER_Gunning_Fog_Index <- nber$NBER_Gunning_Fog_Index * (-1)
nber$NBER_SMOG <- nber$NBER_SMOG * (-1)
